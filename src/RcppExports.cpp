// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// pcov_cpp
double pcov_cpp(const arma::mat& X, const arma::mat& Y, const std::string& estimation_method, const int n_threads);
RcppExport SEXP _PCORcpp_pcov_cpp(SEXP XSEXP, SEXP YSEXP, SEXP estimation_methodSEXP, SEXP n_threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type estimation_method(estimation_methodSEXP);
    Rcpp::traits::input_parameter< const int >::type n_threads(n_threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(pcov_cpp(X, Y, estimation_method, n_threads));
    return rcpp_result_gen;
END_RCPP
}
// pcor_cpp
double pcor_cpp(const arma::mat& X, const arma::mat& Y, const std::string& estimation_method, const int n_threads);
RcppExport SEXP _PCORcpp_pcor_cpp(SEXP XSEXP, SEXP YSEXP, SEXP estimation_methodSEXP, SEXP n_threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type estimation_method(estimation_methodSEXP);
    Rcpp::traits::input_parameter< const int >::type n_threads(n_threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(pcor_cpp(X, Y, estimation_method, n_threads));
    return rcpp_result_gen;
END_RCPP
}
// pcov_test_cpp
Rcpp::List pcov_test_cpp(const arma::mat& X, const arma::mat& Y, const std::string& estimation_method, const int times, const int n_threads);
RcppExport SEXP _PCORcpp_pcov_test_cpp(SEXP XSEXP, SEXP YSEXP, SEXP estimation_methodSEXP, SEXP timesSEXP, SEXP n_threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type estimation_method(estimation_methodSEXP);
    Rcpp::traits::input_parameter< const int >::type times(timesSEXP);
    Rcpp::traits::input_parameter< const int >::type n_threads(n_threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(pcov_test_cpp(X, Y, estimation_method, times, n_threads));
    return rcpp_result_gen;
END_RCPP
}
// pcor_test_cpp
Rcpp::List pcor_test_cpp(const arma::mat& X, const arma::mat& Y, const std::string& estimation_method, const int times, const int n_threads);
RcppExport SEXP _PCORcpp_pcor_test_cpp(SEXP XSEXP, SEXP YSEXP, SEXP estimation_methodSEXP, SEXP timesSEXP, SEXP n_threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type estimation_method(estimation_methodSEXP);
    Rcpp::traits::input_parameter< const int >::type times(timesSEXP);
    Rcpp::traits::input_parameter< const int >::type n_threads(n_threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(pcor_test_cpp(X, Y, estimation_method, times, n_threads));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_PCORcpp_pcov_cpp", (DL_FUNC) &_PCORcpp_pcov_cpp, 4},
    {"_PCORcpp_pcor_cpp", (DL_FUNC) &_PCORcpp_pcor_cpp, 4},
    {"_PCORcpp_pcov_test_cpp", (DL_FUNC) &_PCORcpp_pcov_test_cpp, 5},
    {"_PCORcpp_pcor_test_cpp", (DL_FUNC) &_PCORcpp_pcor_test_cpp, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_PCORcpp(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
